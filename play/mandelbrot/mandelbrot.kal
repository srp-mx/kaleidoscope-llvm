extern putchard(char);

# Logical unary not
def unary!(v)
    if v then
        0
    else
        1;

# Unary negate
def unary-(v)
    0-v;

# Define > with same precedence as <
def binary> 10 (L R)
    R < L;

# Binary logical or (no short-circuit)
def binary| 5 (L R)
    if L then
        1
    else if R then
        1
    else
        0;

# Binary logical and (no short-circuit)
def binary& 6 (L R)
    if !(L) then
        0
    else
        !(!(R));

# Define = with slightly lower precedence than relationals
def binary = 9 (L R)
    !(L < R | L > R);

# Define : for sequencing as a low-precedence op that returns the RHS
def binary : 1 (x y)
    y;

def printdensity(d)
    if d > 8 then
        putchard(32)
    else if d > 4 then
        putchard(46)
    else if d > 2 then
        putchard(43)
    else
        putchard(42);

# Determine if location diverges
# Solve for z = z^2 + c
def mandelconverger(real imag iters creal cimag)
    if iters > 255 | (real*real + imag*imag > 4) then
        iters
    else
        mandelconverger(real*real - imag*imag + creal, 2*real*imag + cimag, iters+1, creal, cimag);

# Return the number of iterations required for the iteration to escape
def mandelconverge(real imag)
    mandelconverger(real, imag, 0, real, imag);

# Compute and plot the mandelbrot set with the specified 2 dimensional range info
def mandelhelp(xmin xmax xstep ymin ymax ystep)
    for y = ymin, y < ymax, ystep in (
        (for x = xmin, x < xmax, xstep in
            printdensity(mandelconverge(x,y)))
        : putchard(10)
    );

# mandel - Plots the mandelbrot set from a position with some magnification
def mandel (realstart imagstart realmag imagmag)
    mandelhelp(realstart, realstart+realmag*78, realmag,
    imagstart, imagstart+imagmag*40, imagmag);

mandel(-2.3, -1.3, 0.05, 0.07);
